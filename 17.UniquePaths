RECURSION:

  int pathCount(int i, int j, int m, int n){
        if(i>=m || j>=n){
            return 0;
        }
        if(i==m-1 && j==n-1){
            return 1;
        }
        return pathCount(i+1,j,m,n)+pathCount(i,j+1,m,n);
    }
    int uniquePaths(int m, int n) {
        return pathCount(0,0,m,n);
    }
    
DYNAMIC PROGRAMMING(Memorization):

  int pathCount(int i, int j, int m, int n, vector<vector<int>> dp){
        if(i>=m || j>=n){
            return 0;
        }
        if(i==m-1 && j==n-1){
            return 1;
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        return dp[i][j]=pathCount(i+1,j,m,n,dp)+pathCount(i,j+1,m,n,dp);
    }
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m+1,vector<int>(n+1,-1));
        return pathCount(0,0,m,n, dp);
    }
    
COMBINATRICS:
   int uniquePaths(int m, int n) {
        int totalSteps= m+n-2;
        int rightSteps=m-1;
        
        double res=1;
        for(int i=1;i<=rightSteps;i++){
            res= res*(totalSteps-(rightSteps-i))/i;
        }
        return res;
    }
